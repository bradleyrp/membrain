#!/usr/bin/python -i

from membrainrunner import *
from scipy import spatial

location = ''
execfile('locations.py')

#---Selections
director_symmetric = ['name P','name C218','name C318']
director_asymmetric = ['(name P and not resname CHL1) or (name C3 and resname CHL1)',
		'(name C218 and not resname CHL1) or (name C25 and resname CHL1)']
selector = '(name P and not resname CHL1) or (name C3 and resname CHL1)'
headspan = ['resname PI2P and (name OP52 or name OP53 or name OP54 or name OP42 or name OP43 or name OP44)',
		'resname PI2P and (name OP52 or name OP53 or name OP54 or name OP32 or name OP33 or name OP34)']
headangle = 'resname PI2P and (name C2 or name P or name C14)'

#---Analysis plan
analysis_descriptors = {
	'v509-10000-29000-100':
		{'sysname':'membrane-v509',
		'sysname_lookup':'membrane-v509-headspan',
		'trajsel':'???',
		'headspan':'resname PI2P and (name OP52 or name OP53 or name OP54 or name OP42 or name OP43 or name OP44)',
		'headangle':'resname PI2P and (name C2 or name P or name C14)',
		'ionname':'Na'},
	'v510-10000-29000-100':
		{'sysname':'membrane-v510',
		'sysname_lookup':'membrane-v510-headspan',
		'trajsel':'???',
		'headspan':'resname PI2P and (name OP52 or name OP53 or name OP54 or name OP42 or name OP43 or name OP44)',
		'headangle':'resname PI2P and (name C2 or name P or name C14)',
		'ionname':'Mg'},
	'v511-10000-29000-100':
		{'sysname':'membrane-v511',
		'sysname_lookup':'membrane-v511-headspan',
		'trajsel':'???',
		'headspan':'resname PI2P and (name OP52 or name OP53 or name OP54 or name OP42 or name OP43 or name OP44)',
		'headangle':'resname PI2P and (name C2 or name P or name C14)',
		'ionname':'Cal'}
	}
		
analysis_names = ['v510???']
routine = ['compute','plot',][0:2]

#---MAIN

if 'compute' in routine:
	for aname in analysis_names:
		for i in analysis_descriptors[aname]: vars()[i] = (analysis_descriptors[aname])[i]
		#---load
		print 'status: loading trajectory'
		grofile,trajfile = trajectory_lookup(analysis_descriptors,aname,globals())
		#---no looping over trajfile names, so only specify one in the analysis_descriptors
		traj = trajfile[0]
		mset.load_trajectory((basedir+'/'+grofile,basedir+'/'+traj),resolution='aamd')
		
		mset.identify_monolayers(director,startframeno=0)
		mset.identify_residues(residues)
		

##############
		u_tf = mset.universe
		frameskip = 1
		lipid_distance = []
		target_residues_abs = mset.monolayer_by_resid[0][mset.resnames.index(targetresname)]
		target_residues_abs = range(40)
		
##############		
		
		checktime()
		head_area = []
		head_angle = []
		
		
		area_select = mset.universe.selectAtoms(headspan)
		angle_select = mset.universe.selectAtoms(headangle)
		whichframes = range(len(mset.universe.trajectory))
		for fr in whichframes:
			mset.gotoframe(fr)
			head_pos.append(ion_select.coordinates())
			
#			clock.append(mset.universe.trajectory[fr].time)






lipid_areas = []
starttime = time.time()
#---loop over analysis descriptors
for ad in analysis_descriptors[analysis_plan]:
	(tests,ionnames,residues,selector,director,trajno,selstring,targetresname) = ad
	#---loop over tests within the descriptor
	for testno in range(len(tests)):
		#---loop over specified trajectories
		for traj in trajectories[systems.index(tests[testno])][trajno]:
			mset = MembraneSet()
			gro = structures[systems.index(tests[testno])]
			basename = traj.split('/')[-1][:-4]
			print 'Accessing '+basename+'.'
			mset.load_trajectory((basedir+'/'+gro,basedir+'/'+traj),resolution='aamd')
			mset.identify_monolayers(director,startframeno=0)
			mset.identify_residues(residues)
			result_data = MembraneData('cells')
			#---frame selection header
			end = None
			start = None
			if framecount == None:
				if end == None: end = mset.nframes
				if start == None: start = 0
				if skip == None: skip = 1
			else:
				start = 0
				end = mset.nframes
				skip = int(float(mset.nframes)/framecount)
				skip = 1 if skip < 1 else skip
			u_tf = mset.universe
			frameskip = 1
			lipid_distance = []
			target_residues_abs = mset.monolayer_by_resid[0][mset.resnames.index(targetresname)]
			target_residues_abs = range(40)
			for frame in mset.universe.trajectory[::frameskip]:
				print frame
				selection = [mset.universe.residues[i].selectAtoms(selstring).coordinates() for i in target_residues_abs]
				lipid_distance.append([max(spatial.distance.pdist(selection[i])) for i in range(40)])
			lipid_areas.append([j*j for i in lipid_distance for j in i])
			if erase_when_finished:
				del mset

#--- head angle
	for aname in analysis_names:
		for i in analysis_descriptors[aname]: vars()[i] = (analysis_descriptors[aname])[i]
		#---load
		print 'status: loading trajectory'
		grofile,trajfile = trajectory_lookup(analysis_descriptors,aname,globals())
		#---no looping over trajfile names, so only specify one in the analysis_descriptors
		traj = trajfile[0]
		mset.load_trajectory((basedir+'/'+grofile,basedir+'/'+traj),resolution='aamd')

		angles = []
		for fr in range(100):
			print fr
			mset.gotoframe(fr)
			pts = mset.universe.selectAtoms('resname P35P and (name C2 or name P or name C14)').coordinates()
			angles.append([arccos(np.dot(pts[i]-pts[i+1],pts[i+2]-pts[i+1])/np.linalg.norm(pts[i]-pts[i+1])/np.linalg.norm(pts[i+2]-pts[i+1])) for i in range(0,120,3)])
	

		hist0 = numpy.histogram([i for j in 180./pi*array(angles) for i in j],bins=40)
		plt.plot(hist0[1][:-1],1*hist0[0],'o-')
		plt.show()



pickle.dump(lipid_areas,open(pickles+'pkl.headspan.v531.v532.part0010.25500-27500-4.pkl','w'))

if 0:
	fig = plt.figure()
	ax = plt.subplot(111)
	for sys in range(len(lipid_areas)):
		hist0 = numpy.histogram(lipid_areas[sys],bins=50)
		c = clrs[sys%len(clrs)]
		ax.plot(hist0[1][1:],hist0[0],'o-',lw=2,color=c)
	#plt.savefig('/home/rpb/tmp.png')
	plt.show()

